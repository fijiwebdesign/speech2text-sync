const data = [
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  126,
  124,
  123,
  122,
  122,
  120,
  119,
  119,
  118,
  118,
  118,
  119,
  119,
  119,
  120,
  121,
  121,
  122,
  124,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  125,
  124,
  125,
  124,
  125,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  124,
  123,
  124,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  123,
  122,
  123,
  122,
  123,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  122,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  121,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  119,
  119,
  119,
  119,
  116,
  115,
  114,
  113,
  113,
  113,
  113,
  113,
  115,
  117,
  118,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  119,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  118,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  117,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  116,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  114,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  113,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  112,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  111,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  110,
  108,
  107,
  106,
  118,
  108,
  108,
  103,
  103,
  103,
  103,
  103,
  103,
  104,
  105,
  107,
  108,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
  109,
];

function detectPeaks(data, windowWidth, threshold) {
  const peaks = [];
  for (let i = 0; i < data.length; i++) {
    const start = Math.max(0, i - windowWidth);
    const end = Math.min(data.length, i + windowWidth);
    let deltaAcc = 0;
    for (let a = start; a < end; a++) {
      deltaAcc += Math.abs(data[a - 1] - data[a]);
    }
    if (deltaAcc > threshold) {
      peaks.push(i);
    }
  }
  return peaks;
}

let windowWidth = 5;
let threshold = 5;

const view = () => {
  const peaks = detectPeaks(data, windowWidth, threshold);

  const svg = m(
    "svg",
    {
      width: data.length,
      height: 200,
      style: {
        border: "1px solid black",
      },
    },
    [
      peaks.map(x => m("line", { x1: x, y1: 0, x2: x, y2: 200, stroke: "blue" })),
      m("polyline", {
        points: data.map((y, x) => `${x},${y}`).join(" "),
        stroke: "red",
        fill: "none",
      }),
    ],
  );
  return m("div", [
    svg,
    m(
      "div",
      "threshold",
      m("input", {
        type: "range",
        min: 1,
        max: 50,
        value: threshold,
        oninput: e => (threshold = e.target.valueAsNumber),
      }),
      threshold,
    ),
    m(
      "div",
      "window width",
      m("input", {
        type: "range",
        min: 1,
        max: 50,
        value: windowWidth,
        oninput: e => (windowWidth = e.target.valueAsNumber),
      }),
      windowWidth,
    ),
  ]);
};

m.mount(document.body, { view });
