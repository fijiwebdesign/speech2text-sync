let _data = [
  [
      0,
      0
  ],
  [
      0,
      0
  ],
  [
      0.005314,
      0
  ],
  [
      0.006371,
      0
  ],
  [
      0.022746,
      0
  ],
  [
      0.039242,
      0
  ],
  [
      0.055557,
      0
  ],
  [
      0.072234,
      0
  ],
  [
      0.089579,
      0
  ],
  [
      0.106595,
      0
  ],
  [
      0.122541,
      0
  ],
  [
      0.140016,
      0
  ],
  [
      0.155433,
      0
  ],
  [
      0.173348,
      0
  ],
  [
      0.190165,
      0
  ],
  [
      0.205106,
      0
  ],
  [
      0.223019,
      0
  ],
  [
      0.239433,
      0
  ],
  [
      0.256574,
      0
  ],
  [
      0.272892,
      124
  ],
  [
      0.289694,
      126
  ],
  [
      0.305986,
      121
  ],
  [
      0.323311,
      114
  ],
  [
      0.340002,
      108
  ],
  [
      0.357206,
      102
  ],
  [
      0.373282,
      95
  ],
  [
      0.390799,
      89
  ],
  [
      0.405677,
      83
  ],
  [
      0.423241,
      78
  ],
  [
      0.439719,
      72
  ],
  [
      0.455641,
      66
  ],
  [
      0.472679,
      61
  ],
  [
      0.48966,
      57
  ],
  [
      0.505728,
      54
  ],
  [
      0.522516,
      51
  ],
  [
      0.539029,
      48
  ],
  [
      0.556656,
      45
  ],
  [
      0.573083,
      44
  ],
  [
      0.589198,
      42
  ],
  [
      0.60658,
      37
  ],
  [
      0.623167,
      34
  ],
  [
      0.638846,
      33
  ],
  [
      0.655479,
      36
  ],
  [
      0.671793,
      36
  ],
  [
      0.68892,
      34
  ],
  [
      0.705683,
      37
  ],
  [
      0.722445,
      33
  ],
  [
      0.738185,
      31
  ],
  [
      0.75562,
      34
  ],
  [
      0.773157,
      32
  ],
  [
      0.789036,
      32
  ],
  [
      0.805936,
      29
  ],
  [
      0.823302,
      35
  ],
  [
      0.838965,
      31
  ],
  [
      0.855823,
      28
  ],
  [
      0.871827,
      24
  ],
  [
      0.888819,
      20
  ],
  [
      0.905691,
      26
  ],
  [
      0.922648,
      26
  ],
  [
      0.939674,
      32
  ],
  [
      0.9562,
      30
  ],
  [
      0.972392,
      28
  ],
  [
      0.989541,
      28
  ],
  [
      1.00581,
      24
  ],
  [
      1.022224,
      22
  ],
  [
      1.03897,
      20
  ],
  [
      1.055256,
      17
  ],
  [
      1.073141,
      13
  ],
  [
      1.089634,
      11
  ],
  [
      1.105417,
      8
  ],
  [
      1.122672,
      10
  ],
  [
      1.139361,
      8
  ],
  [
      1.15675,
      19
  ],
  [
      1.172867,
      94
  ],
  [
      1.190176,
      125
  ],
  [
      1.206683,
      185
  ],
  [
      1.222696,
      217
  ],
  [
      1.239483,
      233
  ],
  [
      1.256241,
      240
  ],
  [
      1.273239,
      242
  ],
  [
      1.289838,
      238
  ],
  [
      1.306679,
      233
  ],
  [
      1.322104,
      227
  ],
  [
      1.339643,
      221
  ],
  [
      1.356547,
      216
  ],
  [
      1.372422,
      210
  ],
  [
      1.389858,
      204
  ],
  [
      1.406792,
      199
  ],
  [
      1.422095,
      206
  ],
  [
      1.439877,
      217
  ],
  [
      1.45688,
      211
  ],
  [
      1.473268,
      205
  ],
  [
      1.488835,
      204
  ],
  [
      1.506309,
      200
  ],
  [
      1.522272,
      199
  ],
  [
      1.53896,
      199
  ],
  [
      1.555593,
      200
  ],
  [
      1.572735,
      201
  ],
  [
      1.590209,
      209
  ],
  [
      1.606737,
      216
  ],
  [
      1.622696,
      226
  ],
  [
      1.639439,
      231
  ],
  [
      1.656783,
      231
  ],
  [
      1.672808,
      226
  ],
  [
      1.689902,
      220
  ],
  [
      1.706665,
      214
  ],
  [
      1.723421,
      208
  ],
  [
      1.739514,
      201
  ],
  [
      1.755734,
      194
  ],
  [
      1.773126,
      187
  ],
  [
      1.789843,
      181
  ],
  [
      1.806856,
      197
  ],
  [
      1.82322,
      211
  ],
  [
      1.839695,
      212
  ],
  [
      1.856938,
      206
  ],
  [
      1.873284,
      201
  ],
  [
      1.889705,
      194
  ],
  [
      1.905983,
      189
  ],
  [
      1.923261,
      185
  ],
  [
      1.93986,
      184
  ],
  [
      1.956745,
      179
  ],
  [
      1.972273,
      186
  ],
  [
      1.989996,
      196
  ],
  [
      2.005553,
      203
  ],
  [
      2.022342,
      210
  ],
  [
      2.038858,
      214
  ],
  [
      2.05561,
      217
  ],
  [
      2.073162,
      220
  ],
  [
      2.089198,
      223
  ],
  [
      2.105331,
      224
  ],
  [
      2.121791,
      220
  ],
  [
      2.139273,
      214
  ],
  [
      2.156864,
      208
  ],
  [
      2.171978,
      202
  ],
  [
      2.188994,
      195
  ],
  [
      2.206637,
      188
  ],
  [
      2.223288,
      183
  ],
  [
      2.239576,
      200
  ],
  [
      2.25598,
      210
  ],
  [
      2.272733,
      212
  ],
  [
      2.289118,
      214
  ],
  [
      2.305551,
      213
  ],
  [
      2.323053,
      215
  ],
  [
      2.340067,
      217
  ],
  [
      2.355728,
      220
  ],
  [
      2.373077,
      222
  ],
  [
      2.389872,
      223
  ],
  [
      2.40607,
      222
  ],
  [
      2.423562,
      218
  ],
  [
      2.439647,
      215
  ],
  [
      2.456717,
      212
  ],
  [
      2.472267,
      211
  ],
  [
      2.48958,
      210
  ],
  [
      2.506582,
      213
  ],
  [
      2.522198,
      215
  ],
  [
      2.539961,
      211
  ],
  [
      2.555889,
      205
  ],
  [
      2.573204,
      198
  ],
  [
      2.589763,
      191
  ],
  [
      2.605476,
      184
  ],
  [
      2.622571,
      178
  ],
  [
      2.639647,
      179
  ],
  [
      2.656811,
      196
  ],
  [
      2.673172,
      208
  ],
  [
      2.689458,
      215
  ],
  [
      2.706672,
      219
  ],
  [
      2.72303,
      222
  ],
  [
      2.739546,
      224
  ],
  [
      2.756791,
      218
  ],
  [
      2.772571,
      217
  ],
  [
      2.789363,
      219
  ],
  [
      2.805722,
      214
  ],
  [
      2.822414,
      209
  ],
  [
      2.839921,
      203
  ],
  [
      2.8558,
      197
  ],
  [
      2.873142,
      190
  ],
  [
      2.889705,
      189
  ],
  [
      2.906123,
      204
  ],
  [
      2.923037,
      219
  ],
  [
      2.939803,
      227
  ],
  [
      2.955625,
      228
  ],
  [
      2.972959,
      231
  ],
  [
      2.989593,
      232
  ],
  [
      3.006709,
      226
  ],
  [
      3.023364,
      219
  ],
  [
      3.039566,
      213
  ],
  [
      3.056941,
      207
  ],
  [
      3.072968,
      202
  ],
  [
      3.089074,
      196
  ],
  [
      3.106584,
      190
  ],
  [
      3.123201,
      183
  ],
  [
      3.139736,
      176
  ],
  [
      3.15572,
      169
  ],
  [
      3.172861,
      162
  ],
  [
      3.190265,
      159
  ],
  [
      3.206795,
      155
  ],
  [
      3.223252,
      150
  ],
  [
      3.239198,
      149
  ],
  [
      3.25561,
      189
  ],
  [
      3.27239,
      208
  ],
  [
      3.289464,
      219
  ],
  [
      3.305573,
      222
  ],
  [
      3.322371,
      224
  ],
  [
      3.339729,
      223
  ],
  [
      3.356716,
      221
  ],
  [
      3.373352,
      220
  ],
  [
      3.389493,
      220
  ],
  [
      3.406731,
      219
  ],
  [
      3.422371,
      214
  ],
  [
      3.439693,
      209
  ],
  [
      3.456833,
      203
  ],
  [
      3.473321,
      197
  ],
  [
      3.488977,
      190
  ],
  [
      3.506494,
      183
  ],
  [
      3.523108,
      176
  ],
  [
      3.53982,
      169
  ],
  [
      3.556627,
      162
  ],
  [
      3.572541,
      155
  ],
  [
      3.58982,
      148
  ],
  [
      3.606393,
      141
  ],
  [
      3.623312,
      134
  ],
  [
      3.639547,
      127
  ],
  [
      3.655571,
      120
  ],
  [
      3.673139,
      113
  ],
  [
      3.689827,
      106
  ],
  [
      3.70611,
      100
  ],
  [
      3.722825,
      93
  ],
  [
      3.739871,
      106
  ],
  [
      3.756145,
      135
  ],
  [
      3.773294,
      152
  ],
  [
      3.789136,
      162
  ],
  [
      3.806819,
      173
  ],
  [
      3.823413,
      180
  ],
  [
      3.839796,
      175
  ],
  [
      3.856944,
      169
  ],
  [
      3.873228,
      162
  ],
  [
      3.889765,
      155
  ],
  [
      3.906099,
      148
  ],
  [
      3.922827,
      141
  ],
  [
      3.939555,
      134
  ],
  [
      3.956641,
      127
  ],
  [
      3.973519,
      122
  ],
  [
      3.989522,
      138
  ],
  [
      4.005801,
      179
  ],
  [
      4.023389,
      195
  ],
  [
      4.038484,
      203
  ],
  [
      4.056767,
      207
  ],
  [
      4.072837,
      210
  ],
  [
      4.089748,
      213
  ],
  [
      4.1068,
      217
  ],
  [
      4.122299,
      218
  ],
  [
      4.139633,
      214
  ],
  [
      4.156585,
      209
  ],
  [
      4.173338,
      207
  ],
  [
      4.189481,
      209
  ],
  [
      4.205554,
      208
  ],
  [
      4.222516,
      206
  ],
  [
      4.238436,
      202
  ],
  [
      4.256897,
      197
  ],
  [
      4.273324,
      190
  ],
  [
      4.289036,
      183
  ],
  [
      4.306831,
      176
  ],
  [
      4.322335,
      169
  ],
  [
      4.340357,
      162
  ],
  [
      4.356922,
      155
  ],
  [
      4.373311,
      148
  ],
  [
      4.389503,
      142
  ],
  [
      4.406183,
      158
  ],
  [
      4.423314,
      178
  ],
  [
      4.438716,
      190
  ],
  [
      4.456898,
      196
  ],
  [
      4.472624,
      199
  ],
  [
      4.489074,
      200
  ],
  [
      4.505533,
      198
  ],
  [
      4.523468,
      195
  ],
  [
      4.539764,
      194
  ],
  [
      4.556127,
      193
  ],
  [
      4.573372,
      191
  ],
  [
      4.589376,
      187
  ],
  [
      4.605839,
      183
  ],
  [
      4.623155,
      181
  ],
  [
      4.639102,
      182
  ],
  [
      4.656871,
      183
  ],
  [
      4.671929,
      184
  ],
  [
      4.689971,
      178
  ],
  [
      4.705972,
      175
  ],
  [
      4.722706,
      174
  ],
  [
      4.739488,
      170
  ],
  [
      4.74,
      163
  ],
  [
      4.74,
      161
  ],
  [
      4.74,
      162
  ],
  [
      4.74,
      156
  ]
];
let data = []
const sentence = 'Just about the only thing I enjoyed about school, was staring at the meal worms.';

const height = 256 + 30; // canvas height

let windowWidth = 5;
let threshold = 10;

const detections = {
  peaks: true,
  lows: true,
  volume: true,
  increases: true,
  decreases: true
}

let timer = 0
let interval = setInterval(() => {
  data.push(..._data.slice(timer, timer+10).map(d => d[1]))
  timer += 10
  m.redraw()
  if (data.length === _data.length) clearTimeout(interval)
}, 100)

const view = () => {
  const points = data.map(y => height - y);
  const peaks = detectPeaks(data, windowWidth, threshold);
  const lows = detectLows(data, windowWidth, threshold);
  const volumes = detectVolume(data, windowWidth, threshold);
  const increases = detectGradientInc(data, windowWidth, threshold);
  const decreases = detectGradientDec(data, windowWidth, threshold);

  const overlays = {
    peaks: peaks.map(x => m("line", { x1: x, y1: 0, x2: x, y2: height, stroke: "#FF149350" })),
    lows: lows.map(x => m("line", { x1: x, y1: 0, x2: x, y2: height, stroke: "#33FFF9" })),
    volume: volumes.map(x => m("line", { x1: x, y1: 0, x2: x, y2: 10, stroke: "#BBFFBB" })),
    increases: increases.map(x => m("line", { x1: x, y1: 10, x2: x, y2: 20, stroke: "#C71585" })),
    decreases: decreases.map(x => m("line", { x1: x, y1: 20, x2: x, y2: 30, stroke: "#33FFF9" })),
  };
  const overlayEls = Object.values(overlays)

  const svg = m(
    "svg",
    {
      width: data.length,
      height,
      style: {
        border: "1px solid black",
      },
    },
    [
      ...overlayEls,
      m("polyline", {
        points: points.map((y, x) => `${x},${y}`).join(" "),
        stroke: "#4233FF",
        fill: "none",
      }),
    ],
  );

  const checkboxes = Object.keys(detections).map(name => {
    return m(
      "div",
      "",
      m("input", {
        type: "checkbox",
        checked: detections[name] ? 'checked' : '',
        value: 1,
        onclick: e => {
          ;(detections[name] = !detections[name]);

          console.log('detection changed', detections[name], name, detections)
        },
      }),
      name,
    )
  });

  const audioLen = 5
  const _words = sentence
    .replace(/((^|\s).{1,3})\s/g, '$1_' )
    .split(' ')
    .map(word => word.replace('_', ' '))
  const words = m(
    "div", 
    { id: "words"}, 
    _words.map((word, i) => {
      const peak = peaks[peaks.length-1]
      const peakTime = peaks.length ? _data[peak][0] + 1 : 0 
      const wordTime = audioLen/_words.length * i;
      console.log('word', { i, word, peakTime, wordTime })
      return m('span', { class: peakTime > wordTime ? 'read' : ''}, word)
    })
  );

  console.log('peaks', peaks)

  return m("div", [
    svg,
    words,
    m(
      "div",
      "threshold",
      m("input", {
        type: "range",
        min: 1,
        max: 100,
        value: threshold,
        oninput: e => (threshold = e.target.valueAsNumber),
      }),
      threshold,
    ),
    m(
      "div",
      "window width",
      m("input", {
        type: "range",
        min: 1,
        max: 100,
        value: windowWidth,
        oninput: e => (windowWidth = e.target.valueAsNumber),
      }),
      windowWidth,
    ),
    checkboxes,
  ]);
};

m.mount(document.body, { view });
